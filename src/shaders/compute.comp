#version 450
#extension GL_ARB_separate_shader_objects : enable

#define ENABLE_ORIENTATION_CULLING true
#define ORIENTATION_CULLING_THRESHOLD 0.9 // This is the threshold for culling blades based on their orientation 

#define ENABLE_FRUSTUM_CULLING true
#define FRUSTUM_CULLING_TOLERANCE 0.1 

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer InputBladesBuffer {
    Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer OutputBladesBuffer {
    Blade outputBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 GetCameraFrontWorld(mat4 viewMat) {
    vec3 negF = viewMat[2].xyz;
    return normalize(-negF);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
    
    Blade blade = inputBlades[gl_GlobalInvocationID.x];
    // Cull the blade if it is not facing the camera
    if(ENABLE_ORIENTATION_CULLING) {
        float theta = blade.v0.w;  
        vec3 grassLeft = vec3(cos(theta), 0, sin(theta)); // Assume up vector is alwyas (0, 1, 0)
        vec3 camFront = GetCameraFrontWorld(camera.view);
        float dotProduct = dot(grassLeft, camFront);
        if (abs(dotProduct)> ORIENTATION_CULLING_THRESHOLD) {
            return; // Skip this blade
        }
    }

    // Cull the blade if it is outside of the frustum
    if(ENABLE_FRUSTUM_CULLING) {


        vec4 bladePosClip = camera.proj * camera.view * blade.v0;
        // Perform perspective divide
        bladePosClip /= bladePosClip.w;
        // Check if the blade is within the normalized device coordinates (NDC) bounds with tolerance
        if (!inBounds(bladePosClip.x, 1.0 + FRUSTUM_CULLING_TOLERANCE) ||
            !inBounds(bladePosClip.y, 1.0 + FRUSTUM_CULLING_TOLERANCE) ||
            !inBounds(bladePosClip.z, 1.0 + FRUSTUM_CULLING_TOLERANCE)) {
            return; // Skip this blade
        }
    }


	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    const uint bladeIdx = atomicAdd(numBlades.vertexCount, 1);
    outputBlades[bladeIdx] = inputBlades[gl_GlobalInvocationID.x];
}
