#version 450
#extension GL_ARB_separate_shader_objects : enable

// Configuration options for forces
#define ENABLE_GRAVITY_ENV true
#define GRAVITY_ACCELERATION_ENV 9.81
#define ENABLE_GRAVITY_FRONT true
#define ENABLE_FORCE_RECOVERY true
#define ENABLE_WIND true

// Configuration options for culling
#define ENABLE_ORIENTATION_CULLING false
#define ORIENTATION_CULLING_THRESHOLD 0.98 // This is the threshold for culling blades based on their orientation 

#define ENABLE_FRUSTUM_CULLING false
#define FRUSTUM_EPS 0.1

#define ENABLE_DISTANCE_CULLING false
#define DISTANCE_MAX 50.0
#define NUM_BUCKETS 15 

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
    vec4 pos; 
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer InputBladesBuffer {
    Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer OutputBladesBuffer {
    Blade outputBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inFrustumClip(vec4 clip, float eps) {
    float w = clip.w;

    if (clip.x < -w - eps) return false;
    if (clip.x >  w + eps) return false;
    if (clip.y < -w - eps) return false;
    if (clip.y >  w + eps) return false;

    if (clip.z < 0.0 - eps) return false;
    if (clip.z >  w + eps) return false;

    return true;
}

const int NUM_WAVES = 3;

float hash11(float p) {
    return fract(sin(p * 27.1687) * 43758.5453123);
}

vec2 hash21(float p) {
    return vec2(hash11(p), hash11(p + 19.17));
}

struct WaveParams {
    vec2 dir;      // horizontal direction 
    float amp;     // amplitude
    float freq;    // spatial frequency
    float phase;   // temporal frequency
};

WaveParams getWaveParams(int i) {
    // Make repeatable parameters per-wave
    vec2 h  = hash21(float(i));       // base random 2D
    vec2 h2 = hash21(float(i) + 13.0);

    float ang = h.x * 6.2831853; // 0..2pi
    vec2 dir = normalize(vec2(cos(ang), sin(ang)));

    WaveParams w;
    w.dir   = dir;

    w.amp   = .5;
    w.freq  = .9;
    w.phase = 7;
    return w;
}

vec3 sampleWindField(vec3 worldPos, float t) {
    vec2 p = worldPos.xz;

    vec2 accum = vec2(0.0);
    float totalWeight = 0.0;

    for (int i = 0; i < NUM_WAVES; ++i) {
        WaveParams w = getWaveParams(i);
        float phaseVal = dot(w.dir, p) * w.freq + t * w.phase;
        float influence = sin(phaseVal) * w.amp;
        accum += w.dir * influence;

        totalWeight += w.amp;
    }

    if (totalWeight > 0.0) {
        accum /= totalWeight;
    }

    return vec3(accum.x, 0.0, accum.y);
}


void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade blade = inputBlades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz; 
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = normalize(blade.up.xyz);
    float theta = blade.v0.w;  
    float height = blade.v1.w; 
    float stiffness = blade.up.w; 
    vec3 bladeLeft = vec3(cos(theta), 0, sin(theta)); // Assume up vector is alwyas (0, 1, 0)
    vec3 bladeForward = cross(up, bladeLeft);

    // DONE: Apply forces on every blade and update the vertices in the buffer
    // Environmental Gravity 
    vec3 gE = vec3(0.0); 
    if (ENABLE_GRAVITY_ENV) {
        vec4 d = vec4(0.0, -1, 0.0, GRAVITY_ACCELERATION_ENV); // (Gravitational direction, magnitude)
        gE = d.w * normalize(d.xyz);
    }

    // Front gravity 
    vec3 gF = vec3(0.0); 
    if(ENABLE_GRAVITY_FRONT) {
        gF = 0.25 * GRAVITY_ACCELERATION_ENV * bladeForward;
    }
    
    // Reovery force
    vec3 fR = vec3(0.0); 
    if(ENABLE_FORCE_RECOVERY) {
        vec3 initialPosition = v0 + normalize(up) * height;
        fR = (initialPosition - v2) * stiffness /* stiffness placeholder */;
    }

    // Wind force
    vec3 fW = vec3(0.0);
    if (ENABLE_WIND) {
        vec3 windDir = sampleWindField(v0, totalTime); // use v0.xz so nearby blades move similarly
        float tipFactor = clamp(dot(v2 - v0, up) / height, 0.0, 1.0);
        windDir = normalize(windDir + 0.0001); // avoid NaN if zero
        float windStrength = 3; // tweak this number
        fW = windDir * windStrength * tipFactor;
    }

    // Apply forces
    vec3 deltaPos = (gE + gF + fR + fW) * deltaTime; 
    v2 = vec3(v2.x + deltaPos.x, max(0.0, v2.y + deltaPos.y), v2.z + deltaPos.z); // Prevent blade from going below ground level (y = 0)
    float lProj = length(v2 - v0 - up * dot((v2 - v0), up)); 
    float invHeight = 1.0 / height; 
    v1 = v0 + height * up * max(1.0 - lProj * invHeight, 0.05 * max(lProj * invHeight, 1.0)); 
    float L0 = length(v2 - v0);
    float L1 = length(v1 - v0) + length(v2 - v1);
    float L = (2 * L0 + L1) * 0.333333; 
    float r = height / L; 
    vec3 v1Corr = v0 + r * (v1 - v0); 
    vec3 v2Corr = v1Corr + r *(v2 - v1);

    blade.v1 = vec4(v1Corr, blade.v1.w);
    blade.v2 = vec4(v2Corr, blade.v2.w);

    inputBlades[gl_GlobalInvocationID.x] = blade; 
    

	// DONE: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer 
    // Cull the blade if it is not facing the camera
    if (ENABLE_ORIENTATION_CULLING) {
    // bladeLeft is the thin axis of the grass in world space
        vec4 bladeLeftView   = camera.view * vec4(bladeLeft, 0.0); // direction -> w = 0
        vec4 bladeOriginView = camera.view * vec4(v0,   1.0);  // position  -> w = 1

        vec3 dirThin     = normalize(bladeLeftView.xyz);
        vec3 dirToBlade  = normalize(bladeOriginView.xyz);

        float alignment = abs(dot(dirThin, dirToBlade));
        if (alignment > ORIENTATION_CULLING_THRESHOLD) {
            return;
        }
    }
    
    mat4 viewProj = camera.proj * camera.view; 
    // Cull the blade if it is outside of the frustum
    if(ENABLE_FRUSTUM_CULLING) {
        vec3 midPos = (0.25 * v0 +
                       0.50 * v1Corr +
                       0.25 * v2Corr);

        vec4 p0Clip  = viewProj * vec4(v0, 1.0);
        vec4 p2Clip  = viewProj * vec4(v2Corr, 1.0);
        vec4 midClip = viewProj * vec4(midPos,       1.0);

        bool visible = false;
        if (inFrustumClip(p0Clip,  FRUSTUM_EPS)) visible = true;
        if (inFrustumClip(p2Clip,  FRUSTUM_EPS)) visible = true;
        if (inFrustumClip(midClip, FRUSTUM_EPS)) visible = true;

        if (!visible) {
            return;
        }
    }

    if(ENABLE_DISTANCE_CULLING) {
        vec3 cameraPos = camera.pos.xyz; 
        float dProj = length(v0 - cameraPos - up * dot((v0 - cameraPos), up));
        bool culled = mod(gl_GlobalInvocationID.x, NUM_BUCKETS) > floor(NUM_BUCKETS * (1 - dProj / DISTANCE_MAX)); 

        if(culled) {
            return; 
        }
    }

	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    const uint bladeIdx = atomicAdd(numBlades.vertexCount, 1);
    outputBlades[bladeIdx] = blade;
}
